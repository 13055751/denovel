import { parseArgs } from "jsr:@std/cli/parse-args";
import { basename, dirname } from "jsr:@std/path";
import { EPub, EpubContentOptions } from "./genepub.ts";
import { exists } from "./main.ts";

// deno-lint-ignore no-control-regex
const rep = /[\x00-\x1F\x7F-\x9F\u200B-\u200F\uFEFF]/g;

/**
 * TXT转换成EPUB
 * @param data 输入的文件内容
 * @param input 输入的文件名
 * @param output 输出位置
 */
export async function toEpub(data: string, input: string, output: string) {
    // 分卷
    const chaps: Array<EpubContentOptions> = [];

    let matches = Array.from(data.matchAll(/[\r\n]+\s*第\s*[一二三四五六七八九十百千万亿0-9]+\s*[章节]\s*(.+)[\r\n]+/g));
    if(matches.length === 0) {
        // 尝试第二种: 2、...
        matches = Array.from(data.matchAll(/[\r\n]+\s*\d+\s*、\s*(.+)[\r\n]+/g));
    }
    for (let i = 1; i <= matches.length; i++) {
        const content = data.substring(matches[i - 1].index, matches[i]?.index),
            title = matches[i - 1][1];

        chaps.push({
            title,
            data: encodeContent(content)
        });
    }

    // 生成 epub 文件
    console.log('Generating EPub file to ', output, '...');
    console.log('EPub has been generated to ', (await new EPub({
        title: basename(input),
        description: "Generated by 2epub",
        content: chaps
    }, output).render()).result);
}

const encodeContent = (str: string) => {
    return str.replace(/&/g, '&amp;')
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;')
        .replace(/"/g, '&quot;')
        .replace(/'/g, '&apos;')
        .replace(/\s*[\r\n]+\s*/g, '<br />')
        .replace(rep, '');
}

if (import.meta.main) {
    const args = parseArgs(Deno.args, {
        string: ['output'],
        boolean: ['help'],
        alias: {
            o: 'output',
            h: 'help'
        }
    });

    if (args.help) {
        console.log(`Convert TXT to EPUB file
    
    Usage:
      deno run 2epub.ts [options] <input>
    
    Options:
        -o, --output <output>  Output dir (default: auto-generated)
        -h, --help             Show help
    
    Example:
      deno run 2epub.ts input.txt -o output.epub`);
        Deno.exit(0);
    }

    const input = args._[0];
    const output = dirname(args.output || input as string);
    if (typeof input !== 'string')
        throw new Error('Input file is required');
    const finfo = await Deno.stat(input);
    let files = [] as string[];
    if(finfo.isDirectory) {
        files = await Array.fromAsync(Deno.readDir(input)).then(data => 
            data.filter(item => item.isFile && item.name.endsWith('.txt')).map(item => item.name)
        );
    } else {
        files = [input];
    }

    console.time('convert');
    for(const file of files) try{
        if(await exists(basename(file) + '.epub')){
            console.log(`"${file}.epub" already exists, skip`);
            continue;
        }
        
        const data = Deno.readTextFileSync(file);
        await toEpub(data, file, output + '/' + basename(file) + '.epub');
        console.log(`"${file}" has been converted to "${basename(file)}.epub"`);
        console.timeLog('convert');
    }catch(e) {
        console.error(`Error converting "${file}": ${(e as Error).message}`);
    }
    console.timeEnd('convert');

    console.log('Done!');
}